---

- name: "{{ jboss_eap_instance_name }} {{ info }} Check existence of the target dir ({{ target_dir }})"
  stat:
    path: "{{ target_dir }}"
  register: conf_00

# Initial creation of the standalone directory
- block:

  - name: "{{ jboss_eap_instance_name }} {{ info }} Copy the JBoss EAP standalone directory "
    shell: "cp -Rfp {{ jboss_home }}/standalone {{ target_dir }}; chown {{ jboss.user }}:{{ jboss.group }} -R {{ target_dir }}"
    register: conf_01

  - name: "{{ jboss_eap_instance_name }} {{ info }} Copy instance specific standalone.conf"
    copy:
      remote_src: true
      owner: "{{ jboss.user }}"
      group: "{{ jboss.group }}"
      src: "{{ jboss_home }}/bin/standalone.conf"
      dest: "{{ target_dir }}/configuration/standalone.conf"

  - name: "{{ jboss_eap_instance_name }} {{ info }} Create the service directory"
    file:
      path: "{{ target_dir }}/service"
      owner: "{{ jboss.user }}"
      group: "{{ jboss.group }}"
      state: directory
      mode: "0750"

  - name: "{{ jboss_eap_instance_name }} {{ info }} Copy init.d script (jboss-as-standalone.sh)"
    copy:
      remote_src: true
      owner: "{{ jboss.user }}"
      group: "{{ jboss.group }}"
      src: "{{ jboss_home }}/bin/init.d/jboss-as-standalone.sh"
      dest: "{{ target_dir }}/service/jboss-as-standalone.sh"
      mode: "0750"

  when: conf_00.stat.isdir is undefined or conf_00.stat.isdir == False

- name: "{{ jboss_eap_instance_name }} {{ info }} Update service init.d script (jboss-as-standalone.sh)"
  lineinfile:
    dest: "{{ target_dir }}/service/jboss-as-standalone.sh"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: yes
  with_items:
    # Setting the correct JBOSS_CONF file
    - { regexp: '^(.*)JBOSS_CONF=(.*)$', line: "\\1JBOSS_CONF=\"{{ jboss_eap_instance_dir }}/service/jboss-as.conf\"" }
    # Setting the correct jboss.server.base.dir
    - { regexp:  '(.*)JBOSS_SCRIPT=(.*)standalone.sh$', line: "\\1JBOSS_SCRIPT=\"\\2standalone.sh -Djboss.server.base.dir={{ jboss_eap_instance_dir }}\"" }
    # Specific to the reload mechanism of JBoss EAP 6 - Changing the "JBOSS_CONSOLE_LOG" to "JBOSS_SERVER_LOG" (prevents hanging at startup while the console log has been disabled)
    - { regexp: '^(.*)JBAS015874(.*)\$JBOSS_CONSOLE_LOG(.*)$', line: "\\1JBAS015874\\2{{ jboss_eap_instance_dir }}/log/server.log\\3" }
    # Specific to the reload mechanism of JBoss EAP 7 - Set the startup-marker file to the instance specific folder
    - { regexp: '^(.*)\$JBOSS_HOME/standalone/tmp/startup-marker(.*)$', line: "\\1{{ jboss_eap_instance_dir }}/tmp/startup-marker\\2" }
  register: conf_02

- name: "{{ jboss_eap_instance_name }} {{ info }} Generate service jboss-as.conf"
  template:
    owner: "{{ jboss.user }}"
    group: "{{ jboss.group }}"
    src: jboss-as.conf.j2
    dest: "{{ target_dir }}/service/jboss-as.conf"
    mode: "0750"
  register: conf_03

- name: "{{ jboss_eap_instance_name }} {{ info }} Update standalone.conf (1/3)"
  lineinfile:
    dest: "{{ target_dir }}/configuration/standalone.conf"
    line: "{{ item }}"
  with_items:
    # Set default binding address
    - "JAVA_OPTS=\"$JAVA_OPTS -Djboss.bind.address={{ jboss_eap_bind_ip_address_public }}\""
    # Set management binding address
    - "JAVA_OPTS=\"$JAVA_OPTS -Djboss.bind.address.management={{ jboss_eap_bind_ip_address_management }}\""
    # Set port offset and time zone
  register: conf_04_1

- name: "{{ jboss_eap_instance_name }} {{ info }} Update standalone.conf (2/3)"
  lineinfile:
    dest: "{{ target_dir }}/configuration/standalone.conf"
    line: "{{ item }}"
  with_items:
    - "JAVA_OPTS=\"$JAVA_OPTS -Duser.timezone={{ jvm_user_timezone }} -Djboss.socket.binding.port-offset={{ jboss_eap_instance_port_offset }}\""
    # Set node name
    - "JAVA_OPTS=\"$JAVA_OPTS -Djboss.node.name={{ jvm_jboss_node_name }}\""
    - "JAVA_OPTS=\"$JAVA_OPTS -Duser.language={{ jvm_user_language }}\""
    - "JAVA_OPTS=\"$JAVA_OPTS -Duser.country={{ jvm_user_country }}\""
    - "JAVA_OPTS=\"$JAVA_OPTS -Dfile.encoding={{ jvm_file_encoding }}\""
    - "JAVA_OPTS=\"$JAVA_OPTS -Djava.io.tmpdir={{ jvm_java_io_tmpdir }}\""
  register: conf_04_2

- name: "{{ jboss_eap_instance_name }} {{ info }} Update standalone.conf (3/3)"
  lineinfile:
    dest: "{{ target_dir }}/configuration/standalone.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backrefs: yes
  with_items:
    # Set JVM Xms
    - { regexp: '^(.*)Xms(\d+)m(.*)$', line: "\\1Xms{{ jvm_xm }}m\\3" }
    # Set JVM Xmx
    - { regexp: '^(.*)Xmx(\d+)m(.*)$', line: "\\1Xmx{{ jvm_xm }}m\\3" }
    # Remove JVM MaxPermSize
    - { regexp: '^(.*) -XX:MaxPermSize=(\d+)m(.*)$', line: "\\1\\3" }
  register: conf_05

- name: "{{ jboss_eap_instance_name }} {{ info }} Copy application(s) from the file system"
  copy:
    owner: "{{ jboss.user }}"
    group: "{{ jboss.group }}"
    src: "{{ app_dir +'/'+ item }}"
    dest: "{{ target_dir }}/deployments"
  with_items: "{{ app_list }}"
  register: conf_06

- name: "{{ jboss_eap_instance_name }} {{ info }} Retrieve application(s) from Nexus"
  maven_artifact: group_id={{ item.g }} artifact_id={{ item.a }} extension={{ item.e }} version={{ item.v }} repository_url={{ nexus_download_url }} dest={{ download_dir }}/{{ item.g }}_{{ item.a }}_{{ item.e }}_{{ item.v }} username="{{ nexus_user }}" password="{{ nexus_password }}"
  with_items: "{{ app_mvn_list }}"
  register: conf_07

- name: "{{ jboss_eap_instance_name }} {{ info }} Copy application(s) from Nexus"
  when: conf_07.changed
  copy:
    remote_src: true
    owner: "{{ jboss.user }}"
    group: "{{ jboss.group }}"
    src: "{{ download_dir }}/{{ item.g }}_{{ item.a }}_{{ item.e }}_{{ item.v }}"
    dest: "{{ target_dir }}/deployments/{{ item.a }}"
  with_items: "{{ app_mvn_list }}"

- name: "{{ jboss_eap_instance_name }} {{ info }} Generate service systemd unit file"
  template:
    owner: "{{ jboss.user }}"
    group: "{{ jboss.group }}"
    src: jboss-as-standalone.service.j2
    dest: "{{ target_dir }}/service/{{ jboss_eap_instance_service_name }}.service"
    mode: "0750"
  register: conf_08

- name: "{{ jboss_eap_instance_name }} {{ info }} Generate instance.info file"
  template:
    owner: "{{ jboss.user }}"
    group: "{{ jboss.group }}"
    src: instance.info.j2
    dest: "{{ target_dir }}/instance.info"
    mode: "0640"
  register: conf_09

- name: "{{ jboss_eap_instance_name }} {{ info }} Update mgmt-*.properties"
  lineinfile:
    dest: "{{ item.dest }}"
    line: "{{ item.line }}"
  with_items:
    - { dest: "{{ target_dir }}/configuration/mgmt-users.properties", line: "{{ jboss_eap_instance_admin_user }}={{ jboss_eap_instance_admin_password }}" }
    - { dest: "{{ target_dir }}/configuration/mgmt-groups.properties", line: '{{ jboss_eap_instance_admin_user}}={{ jboss_eap_instance_admin_groups }}' }
  register: conf_10

# "check_mode: no" to ensure that the check-mode CLI files are present
- name: "{{ jboss_eap_instance_name }} {{ info }} Copy CLI file from the file system"
  copy:
    owner: "{{ jboss.user }}"
    group: "{{ jboss.group }}"
    src: "{{ cli_dir +'/'+ item }}"
    dest: "{{ target_dir }}/configuration"
  with_items: "{{ cli_list }}"
  register: conf_11

- name: "{{ jboss_eap_instance_name }} {{ info }} Update permissions"
  file: path={{ item }} owner={{ jboss.user }} group={{ jboss.group }} state=directory recurse=yes mode="o-rx"
  with_items:
    - "{{ jboss_home }}"
    - "{{ target_dir }}"
  register: conf_12

- name: "{{ jboss_eap_instance_name }} {{ info }} Update ACL"
  acl: name={{ target_dir }} etype=other state=present permissions='---' default=true recursive=true
  register: conf_13

- name: "{{ jboss_eap_instance_name }} {{ info }} Set is_modified"
  set_fact:
    is_modified: "{{ distribution.changed or conf_01.changed or conf_02.changed or conf_03.changed or conf_04_1.changed or conf_04_2.changed or conf_05.changed or conf_06.changed or conf_07.changed or conf_08.changed or conf_09.changed or conf_10.changed or conf_11.changed or conf_12.changed or conf_13.changed }}"
